From 6c6a8a3e78cd32b5f330f58d7e701bed0ba7f9cb Mon Sep 17 00:00:00 2001
From: Georgi Djakov <georgi.djakov@linaro.org>
Date: Thu, 25 Aug 2016 18:43:35 +0300
Subject: PM / OPP: Drop RCU usage in dev_pm_opp_adjust_voltage()

Signed-off-by: Georgi Djakov <georgi.djakov@linaro.org>
---
 drivers/base/power/opp/core.c | 27 ++++++++++-----------------
 1 file changed, 10 insertions(+), 17 deletions(-)

diff --git a/drivers/base/power/opp/core.c b/drivers/base/power/opp/core.c
index 4934898..70c7448 100644
--- a/drivers/base/power/opp/core.c
+++ b/drivers/base/power/opp/core.c
@@ -1624,18 +1624,14 @@ int dev_pm_opp_adjust_voltage(struct device *dev, unsigned long freq,
 			      unsigned long u_volt)
 {
 	struct opp_table *opp_table;
-	struct dev_pm_opp *new_opp, *tmp_opp, *opp = ERR_PTR(-ENODEV);
+	struct dev_pm_opp *tmp_opp, *opp = ERR_PTR(-ENODEV);
 	int r = 0;
-
-	/* keep the node allocated */
-	new_opp = kmalloc(sizeof(*new_opp), GFP_KERNEL);
-	if (!new_opp)
-		return -ENOMEM;
+	unsigned long tol;
 
 	mutex_lock(&opp_table_lock);
 
 	/* Find the opp_table */
-	opp_table = _find_opp_table(dev);
+	opp_table = _find_opp_table_unlocked(dev);
 	if (IS_ERR(opp_table)) {
 		r = PTR_ERR(opp_table);
 		dev_warn(dev, "%s: Device OPP not found (%d)\n", __func__, r);
@@ -1655,27 +1651,24 @@ int dev_pm_opp_adjust_voltage(struct device *dev, unsigned long freq,
 	}
 
 	/* Is update really needed? */
-	if (opp->u_volt == u_volt)
+	if (opp->supplies[0].u_volt == u_volt)
 		goto unlock;
-	/* copy the old data over */
-	*new_opp = *opp;
 
-	/* plug in new node */
-	new_opp->u_volt = u_volt;
+	/* adjust voltage node */
+	tol = u_volt * opp_table->voltage_tolerance_v1 / 100;
+	opp->supplies[0].u_volt = u_volt;
+	opp->supplies[0].u_volt_min = u_volt - tol;
+	opp->supplies[0].u_volt_max = u_volt + tol;
 
-	list_replace_rcu(&opp->node, &new_opp->node);
 	mutex_unlock(&opp_table_lock);
-	call_srcu(&opp_table->srcu_head.srcu, &opp->rcu_head, _kfree_opp_rcu);
 
 	/* Notify the change of the OPP */
-	srcu_notifier_call_chain(&opp_table->srcu_head, OPP_EVENT_ADJUST_VOLTAGE,
-				 new_opp);
+	blocking_notifier_call_chain(&opp_table->head, OPP_EVENT_ADJUST_VOLTAGE, opp);
 
 	return 0;
 
 unlock:
 	mutex_unlock(&opp_table_lock);
-	kfree(new_opp);
 	return r;
 }
 
-- 
cgit 
